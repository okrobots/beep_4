name: Build beep_4 APK

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Buildozer and Core Dependencies
      run: |
        pip install buildozer
        pip install cython

        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev zlib1g-dev libffi-dev python3-dev openjdk-17-jdk git
        sudo apt-get clean

        P4A_DIR="/home/runner/work/beep_4/beep_4/.buildozer/android/platform/python-for-android"
        BUILD_PLATFORM_DIR="/home/runner/work/beep_4/beep_4/.buildozer/android/platform"
        ANDROID_SDK_ROOT="$BUILD_PLATFORM_DIR/android-sdk" # Define SDK root for sdkmanager

        echo "Ensuring necessary Buildozer Android platform directories exist..."
        mkdir -p "$BUILD_PLATFORM_DIR"
        
        # --- Clean and initial update ---
        echo "Cleaning Buildozer Android build artifacts and SDK/NDK cache..."
        buildozer android clean || true 
        
        echo "Running initial buildozer android update to download basic SDK/cmdline-tools..."
        buildozer android update --verbose || { echo "ERROR: Initial buildozer android update failed!"; exit 1; }
        echo "Initial buildozer android update complete."

        # --- CRITICAL: Accept Android SDK Licenses ---
        echo "Attempting to accept Android SDK licenses explicitly..."
        # Locate the sdkmanager. It should be in the latest cmdline-tools version downloaded by buildozer.
        # Find the path to sdkmanager dynamically, as the exact version number can vary.
        SDK_MANAGER_PATH=$(find "$ANDROID_SDK_ROOT" -name "sdkmanager" | head -n 1)
        
        if [ -z "$SDK_MANAGER_PATH" ]; then
            echo "Error: sdkmanager not found at expected path after buildozer android update. Cannot accept licenses."
            echo "Check the output of the previous 'Initial buildozer android update' step for SDK download errors."
            exit 1
        fi
        
        # Pipe 'yes' to sdkmanager --licenses to accept all licenses non-interactively
        echo "Running sdkmanager --licenses via '$SDK_MANAGER_PATH'"
        yes | "$SDK_MANAGER_PATH" --licenses || { echo "ERROR: Accepting Android SDK licenses failed!"; exit 1; }
        echo "Android SDK licenses accepted."
        
        # --- Run buildozer update again to install components now that licenses are accepted ---
        echo "Running buildozer android update again to ensure full setup after license acceptance..."
        buildozer android update --verbose || { echo "ERROR: Final buildozer android update failed after license acceptance!"; exit 1; }
        echo "Final buildozer android update complete."

        # --- Verify python-for-android (as fallback) ---
        echo "Final verification: Checking for python-for-android at: $P4A_DIR"
        if [ -d "$P4A_DIR" ]; then
            echo "SUCCESS: python-for-android directory found! Listing its contents:"
            ls -la "$P4A_DIR"
        else
            echo "FATAL ERROR: python-for-android directory is STILL MISSING! Review 'Final buildozer android update' output."
            exit 1
        fi
        echo "------------------------------------------"

    - name: Generate buildozer.spec
      run: |
        cat > buildozer.spec <<EOF
        [app]
        title = beep_4
        package.name = beep4
        package.domain = org.example
        version = 1.0
        source.dir = .
        requirements = python3,kivy,requests
        android.permissions = INTERNET, WAKELOCK
        android.minsdk = 21
        android.targetsdk = 33
        android.archs = arm64-v8a

        # If python-for-android issues persist, uncomment this to try a specific branch for p4a
        # p4a.branch = develop

        [buildozer]
        log_level = 2
        EOF
        
        echo "--- buildozer.spec content after generation ---"
        cat buildozer.spec
        echo "----------------------------------------------"

    - name: Build APK
      run: |
        # Use --log-level 5 for very verbose output during the actual build
        buildozer -v android debug --log-level 5
        ls -lh bin/

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: beep_4-apk
        path: bin/*.apk
        retention-days: 7
